#!/usr/bin/env ruby
=begin

Author:: Sebastien Badia (<seb@sebian.fr>)
Date:: Mon Jun 04 23:22:33 +0200 2012

OpenStackg5k is designed for deploy OpenStack cloud midleware on Grid'5000.
For more information see <http://github.com/sbadia/openstack-campaign/>
Copyright Â© 2012  Sebastien Badia

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=end

$: << File.join(File.dirname(__FILE__), "..", "lib")

require 'openstackg5k'
require 'puppetg5k'
require 'rubygems'
require 'pp'
require 'mixlib/cli'
require 'restfully'
require 'net/ssh'
require 'net/scp'
require 'net/ssh/multi'
require 'json'
require 'yaml'

include Openstackg5k
include Puppetg5k

class Openstack
  include Mixlib::CLI

  option :no_clean,
    :short        => "-c",
    :long         => "--no-clean",
    :description  => "[auto] Disable restfully clean (jobs/deploy)",
    :boolean      => true

  option :debug,
    :short        => "-d",
    :long         => "--debug",
    :description  => "       Enable debuging outputs",
    :boolean      => true

  option :mode,
    :short        => "-m MODE",
    :long         => "--mode MODE (default: auto)",
    :description  => "       [auto|educ] Educ = More educational please (Bypass submission and deployment, for Grid'5000 School 2012)\n\t\t\t\t\t\t\tAuto = I want my cloud now (Use API for submit and deploy nodes)",
    :default      => "auto"

  option :help,
    :short        => "-h",
    :long         => "--help",
    :description  => "       Show this message",
    :on           => :tail,
    :boolean      => true,
    :show_options => true,
    :exit         => 0

  option :input_nodes,
    :short        => "-i NODES or STDIN",
    :long         => "--input NODES or STDIN",
    :description  => "[educ] Provide input node file (kavlan style) use it with educ mode"

  option :job_name,
    :short        => "-j JOB NAME",
    :long         => "--name JOB NAME",
    :description  => "[auto] The name of the job (default: openstackg5k)",
    :default      => "openstackg5k"

  option :key,
    :short        => "-k KEY",
    :long         => "--key KEY",
    :description  => "[auto] Name of then SSH key for the deployment (default: #{Openstackg5k::ssh_key})",
    :default      => Openstackg5k::ssh_key

  option :nodes,
    :short        => "-n NUM Nodes",
    :long         => "--nodes Num Nodes",
    :description  => "[auto] Number of nodes (default: 2, min: 2)",
    :default      => 2

  option :site,
    :short        => "-s SITE",
    :long         => "--site SITE",
    :description  => "[auto] Site to launch job (default: #{%x[hostname -f].split('.')[1]})",
    :default      => "#{%x[hostname -f].split('.')[1]}"

  option :base_uri,
    :short        => "-u URI",
    :long         => "--uri URI",
    :description  => "[auto] API Base URI (default: stable API)",
    :default      => "https://api.grid5000.fr/stable/grid5000"

  option :volumes,
    :short        => "-v",
    :long         => "--volumes",
    :description  => "       Enable Nova Volumes feature (ISCSI) (ubuntu-x64-br@sbadia/ubuntu-x64-1204-custom@sbadia)",
    :boolean      => true

  option :version,
    :short        => "-V",
    :long         => "--version",
    :description  => "       Show Openstackg5k version",
    :boolean      => true,
    :proc         => lambda {|v| puts Openstackg5k::VERSION},
    :exit         => 0

  option :walltime,
    :short        => "-w WALLTIME",
    :long         => "--walltime WALLTIME",
    :description  => "[auto] Walltime of the job (default: 1) hours",
    :default      => "01:00:00"

  def runos
    parse_options
    $log = Logger.new(STDOUT)
    if config[:debug]
      $log.level = Logger::DEBUG
    else
      $log.level = Logger::INFO
    end
    $jobs = []
    $deploy = []

    %w{INT TERM}.each do |sig|
      Signal.trap(sig){
        if ! config[:no_clean].nil?
          Openstackg5k::clean!
        end
        exit 1
      }
    end
    if config[:nodes].to_i <= 1
      $log.error "Please provide more than #{config[:nodes].to_i} node... (min: 2)"
      exit 1
    end
    case config[:mode]
    when 'educ'
      educational
    when 'auto'
      launch_os
    else
      $log.error "Unknow mode, authorized modes: auto or educ"
      exit 2
    end
  end # def:: runos

  def execute(good)
    nodes = good.dup
    Puppetg5k::clush_nodes(good)
    Puppetg5k::generate_site(good)
    Puppetg5k::autosign_puppet(good)
    ctrl = nodes.shift
    Net::SSH::Multi.start(:on_error => :warn) do |session|
      good.each do |node|
        session.use "root@#{node}"
      end
      session.group :compute do
        nodes.each do |cmp|
          session.use "root@#{cmp}"
        end
      end
      session.group :cloud do
        ctrl.each do |ctr|
          session.use "root@#{ctr}"
        end
      end
      # nexec(session, cmd, args = {:group => nil, :critical => true, :showerr => true, :showout => true})
      $log.info "(#{Openstackg5k::time_elapsed}s) Install curl,ntpdate,lvm2 packages..."
      Openstackg5k::nexec(session,"sed -e '/grid5000/d' -i /etc/apt/sources.list;apt-get update;apt-get install curl ntpdate lvm2 -y --force-yes", args = {:showout => false})
      $log.info "(#{Openstackg5k::time_elapsed}s) Install puppet...."
      Openstackg5k::nexec(session,"https_proxy=\"http://proxy:3128\" curl -s https://raw.github.com/sbadia/puppet-puppet/master/files/scripts/puppet_install.sh | sudo PUPPET_VERSION=2.7.12 PROXYFIED=true PREVENT_UPDATE=no sh", args = {:showout => true})
      session.loop
      $log.info "(#{Openstackg5k::time_elapsed}s) Syncronize clock with ntp...."
      Openstackg5k::nexec(session,"ntpdate ntp", args = {:showout => false})
      session.loop
      # clush -l root -w $(nodeset -f $(kavlan -l)) 'date'
      if ! config[:volumes].nil?
        $log.info "(#{Openstackg5k::time_elapsed}s) Configure nova-volumes (create pv and vg)..."
        Openstackg5k::nexec(session,"pvcreate /dev/sda2;vgcreate nova-volumes /dev/sda2",args = {:showout => false})
        session.loop
      end
      good.each do |nod|
        $log.info "(#{Openstackg5k::time_elapsed}s) Upload puppet modules on #{nod}..."
        system("rsync --numeric-ids --archive --bwlimit=100000 --rsh ssh #{File.join('./',File.dirname(__FILE__),'..','modules')} root@#{nod}:/etc/puppet")
      end
      $log.info "Install puppetmaster storeconfigs..."
      Openstackg5k::nexec(session,"puppet apply --modulepath /etc/puppet/modules/ -e \"class { 'puppet::master': }\"",args = { :group => :cloud, :critical => true, :showout => true})
      session.loop
      $log.info "Install grizzly pre-requists on computes nodes..."
      Openstackg5k::nexec(session,"puppet apply --modulepath /etc/puppet/modules/ -e \"class { 'puppet::client': }\"",args = { :group => :compute, :critical => true, :showout => true})
      session.loop
      $log.info "Install OpenStack using puppet... (cloud ctrl)"
      Openstackg5k::nexec(session,"puppet agent -t --server=#{ctrl.to_s}",args = { :group => :cloud, :critical => true, :showout => true})
      session.loop
      $log.info "Install OpenStack using puppet... (computes nodes)"
      Openstackg5k::nexec(session,"puppet agent -t --server=#{ctrl.to_s}",args = { :group => :compute, :critical => true, :showout => true})
      session.loop
      $log.info "(#{Openstackg5k::time_elapsed}s) Finish install..."
      Openstackg5k::nexec(session,"ip link set dev br100 promisc on",args = { :critical => false, :showout => false})
      session.loop
      if config[:mode] == 'auto'
        $log.info "(#{Openstackg5k::time_elapsed/60}m) It's ok ! You can now connect to the cloud controller ('ssh root@#{ctrl.to_s}' and launch 'bash /tmp/nova.sh cirros')"
      else
        $log.info "(#{Openstackg5k::time_elapsed/60}m) It's ok ! You can now connect to the cloud controller ('ssh root@#{ctrl.to_s}')"
      end
    end # Net::SSH::Multi
  end # def:: execute

  def educational
    if config[:input_nodes] != nil
      if File.file?(config[:input_nodes])
        input = IO::readlines(config[:input_nodes]).map { |l| l.chomp }
        input.each do |node|
          if !(node =~ /-kavlan-/ )
            $log.error "Nodes passed are not KaVLAN fqdn, please check (#{node})..."
            exit 2
          end
        end
        if input.count <= 1
          $log.error "Please provide more than #{input.count} node... (min: 2)"
          exit 2
        end
      else
        $log.error "File #{config[:input_nodes]} doesn't exist or not readable..."
      end
      # Launch openstak deployment
      execute(input)
    else
      $log.error "No nodes provided (OpenStack install aborded)..."
      exit 2
    end
  end # def:: educational

  def launch_os
    begin
      if ! config[:volumes].nil?
        deploy_env = "ubuntu-x64-1204-custom@sbadia"
        timeout_dep = 1200
        wait_dep = 50
        oar_types = ['deploy','destructive']
      else
        deploy_env = "ubuntu-x64-1204@sbadia"
        timeout_dep = 900
        wait_dep = 30
        oar_types = ['deploy']
      end
      Restfully::Session.new(:logger => $log, :cache => false, :base_uri => config[:base_uri]) do |root,rsession|
        site = root.sites[:"#{config[:site]}"]
        if site.status.find{ |node| node['system_state'] == 'free' && node['hardware_state'] == 'alive' } then
          rsession.logger.info "Job: #nodes => #{config[:nodes]}, type => {type='kavlan'}/vlan=1"
          new_job = site.jobs.submit(
            :resources => "{type='kavlan'}/vlan=1+/nodes=#{config[:nodes]},walltime=#{config[:walltime]}",
            :command => "sleep #{(config[:walltime].to_i)*7200}",
            :types => oar_types,
            :name => config[:job_name]) rescue nil
          $jobs.push(new_job) unless new_job.nil?
        else
          rsession.logger.warn "No enough free node on #{config[:site]} site"
          exit 1
        end

        if $jobs.empty?
          rsession.logger.error "No jobs, quit..."
          exit 0
        end

        begin
          Timeout.timeout(120) do
            until $jobs.all?{|job| job.reload['state'] == 'running' } do
              rsession.logger.info "Some jobs are not running, wait before checking..."
              sleep 4
            end
          end
        rescue Timeout::Error => e
          rsession.logger.warn "One of the jobs is still not running..."
        end

        $jobs.each do |job|
          next if job.reload['state'] != 'running'
          $vlan = Openstackg5k::get_vlan_property(job['uid'])
          rsession.logger.info "Deploy: env => #{deploy_env}, nodes => #{job["assigned_nodes"]}, vlan => #{$vlan.to_s}"
          new_deploy = job.parent.deployments.submit(:environment => deploy_env, :nodes => job['assigned_nodes'], :key => File.read(config[:key]), :vlan => $vlan.to_s) rescue nil
          $deploy.push(new_deploy) unless new_deploy.nil?
        end

        begin
          Timeout.timeout(timeout_dep) do
            until $deploy.all?{ |deployment| deployment.reload['status'] != 'processing' } do
              rsession.logger.info "Some deployments are not terminated. Waiting before checking again..."
              sleep wait_dep
            end
          end
        rescue Timeout::Error => e
          rsession.logger.warn "One of the deployments is still not terminated, it will be discarded."
        end

        $deploy.each do |deployment|
          next if deployment.reload['status'] != 'terminated'
          good = []
          deployment['nodes'].each do |conv|
            good << "#{conv.split('.')[0]}-kavlan-#{$vlan.to_s}.#{config[:site]}.grid5000.fr"
          end

          # Install openstack on 'good' nodes
          execute(good)

        end # $deploy.each
      end # Restfully::Session
    rescue => e
      $log.error "Catched unexpected exception #{e.class.name}: #{e.message} - #{e.backtrace.join("\n")}"
      if ! config[:no_clean].nil?
        Openstackg5k::clean!
        exit 1
      end
    end
  end # def:: launch_os
end # class:: Openstackg5k

openstack = Openstack.new
openstack.runos
